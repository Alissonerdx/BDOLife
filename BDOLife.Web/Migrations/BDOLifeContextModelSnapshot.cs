// <auto-generated />
using System;
using BDOLife.Infra.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BDOLife.Web.Migrations
{
    [DbContext(typeof(BDOLifeContext))]
    partial class BDOLifeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BDOLife.Core.Entities.Agrupamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Agrupamentos");
                });

            modelBuilder.Entity("BDOLife.Core.Entities.AgrupamentoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgrupamentoId")
                        .HasColumnType("int");

                    b.Property<string>("ItemReferenciaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Principal")
                        .HasColumnType("bit");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgrupamentoId");

                    b.HasIndex("ItemReferenciaId");

                    b.ToTable("AgrupamentosItens");
                });

            modelBuilder.Entity("BDOLife.Core.Entities.Configuracao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Atualizando")
                        .HasColumnType("bit");

                    b.Property<bool>("AtualizarMarketAutomaticamente")
                        .HasColumnType("bit");

                    b.Property<bool>("Manutencao")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ProximaAtualizacaoEm")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UltimaAtualizacaoMarket")
                        .HasColumnType("datetime2");

                    b.Property<string>("Versao")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Configuracao");
                });

            modelBuilder.Entity("BDOLife.Core.Entities.HistoricoPreco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("ItemReferenciaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("QuantidadeDisponivel")
                        .HasColumnType("bigint");

                    b.Property<long>("QuantidadeTotalVenda")
                        .HasColumnType("bigint");

                    b.Property<long>("Valor")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ItemReferenciaId");

                    b.ToTable("HistoricosPrecos");
                });

            modelBuilder.Entity("BDOLife.Core.Entities.Imperial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Excluido")
                        .HasColumnType("bit");

                    b.Property<int>("Habilidade")
                        .HasColumnType("int");

                    b.Property<int>("NivelHabilidade")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PorcentagemBonus")
                        .HasColumnType("int");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<long>("Valor")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Imperiais");
                });

            modelBuilder.Entity("BDOLife.Core.Entities.ImperialReceita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ImperialId")
                        .HasColumnType("int");

                    b.Property<string>("ItemReferenciaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImperialId");

                    b.HasIndex("ItemReferenciaId");

                    b.ToTable("ImperiaisReceitas");
                });

            modelBuilder.Entity("BDOLife.Core.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Adquirido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("AgrupamentoId")
                        .HasColumnType("int");

                    b.Property<int>("BdoId")
                        .HasColumnType("int");

                    b.Property<string>("Categoria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Excluido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Experiencia")
                        .HasColumnType("int");

                    b.Property<int>("Grau")
                        .HasColumnType("int");

                    b.Property<string>("Grupo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagemUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalizacaoNPC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Peso")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ProcNormalExcessao")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ProcRaroExcessao")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("QuantidadeDisponivel")
                        .HasColumnType("bigint");

                    b.Property<string>("ReferenciaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<int?>("TipoReceita")
                        .HasColumnType("int");

                    b.Property<long>("Valor")
                        .HasColumnType("bigint");

                    b.Property<long?>("ValorNPC")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ReferenciaId");

                    b.ToTable("Itens");
                });

            modelBuilder.Entity("BDOLife.Core.Entities.Maestria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AumentoChanceEspecial")
                        .HasColumnType("int");

                    b.Property<int?>("AumentoChanceRaro")
                        .HasColumnType("int");

                    b.Property<int?>("AumentoNumItensBasico")
                        .HasColumnType("int");

                    b.Property<int?>("AumentoNumItensEspecial")
                        .HasColumnType("int");

                    b.Property<int?>("AumentoNumItensRaro")
                        .HasColumnType("int");

                    b.Property<decimal?>("ImperialBonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ProcEspecial")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ProcNormal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ProcRaro")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProcessadoPorVez")
                        .HasColumnType("int");

                    b.Property<decimal?>("ProducaoBonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<int>("Valor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Maestrias");
                });

            modelBuilder.Entity("BDOLife.Core.Entities.MaestriaAlquimia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("ChanceRareItems")
                        .HasColumnType("float");

                    b.Property<double>("ChanceRegularItems")
                        .HasColumnType("float");

                    b.Property<double>("ChanceSpecialItems")
                        .HasColumnType("float");

                    b.Property<double>("ImperialBonus")
                        .HasColumnType("float");

                    b.Property<int>("Mastery")
                        .HasColumnType("int");

                    b.Property<double>("MaxProcChance")
                        .HasColumnType("float");

                    b.Property<double>("RareProc")
                        .HasColumnType("float");

                    b.Property<double>("RegularProc")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("MaestriasAlquimia");
                });

            modelBuilder.Entity("BDOLife.Core.Entities.MaestriaCulinaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Crafts")
                        .HasColumnType("float");

                    b.Property<double>("ImperialBonus")
                        .HasColumnType("float");

                    b.Property<double>("MassProduceChance")
                        .HasColumnType("float");

                    b.Property<int>("Mastery")
                        .HasColumnType("int");

                    b.Property<double>("RareAddChance")
                        .HasColumnType("float");

                    b.Property<double>("RareMaxProcChance")
                        .HasColumnType("float");

                    b.Property<double>("RareProc")
                        .HasColumnType("float");

                    b.Property<double>("RegularMaxProcChance")
                        .HasColumnType("float");

                    b.Property<double>("RegularProc")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("MaestriasCulinaria");
                });

            modelBuilder.Entity("BDOLife.Core.Entities.NivelProfissao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ExperienciaProximoLevel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ExperienciaTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Maestria")
                        .HasColumnType("int");

                    b.Property<int>("Nivel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NiveisProfissoes");
                });

            modelBuilder.Entity("BDOLife.Core.Entities.PedraAlquimia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BonusProcessamento")
                        .HasColumnType("int");

                    b.Property<int>("Categoria")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PedrasAlquimia");
                });

            modelBuilder.Entity("BDOLife.Core.Entities.RankingCulinaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CrescimentoOferta")
                        .HasColumnType("float");

                    b.Property<double>("CrescimentoPreco")
                        .HasColumnType("float");

                    b.Property<double>("CrescimentoProcura")
                        .HasColumnType("float");

                    b.Property<long>("Custo")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<long>("LucroBruto")
                        .HasColumnType("bigint");

                    b.Property<long>("LucroLiquido")
                        .HasColumnType("bigint");

                    b.Property<int>("Maestria")
                        .HasColumnType("int");

                    b.Property<long?>("QuantidadeProcNormal")
                        .HasColumnType("bigint");

                    b.Property<long?>("QuantidadeProcRaro")
                        .HasColumnType("bigint");

                    b.Property<string>("ReceitaReferenciaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Resultado")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ReceitaReferenciaId");

                    b.ToTable("RankingsCulinaria");
                });

            modelBuilder.Entity("BDOLife.Core.Entities.ReceitaItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Agrupamento")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("Excluido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ItemReferenciaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Quantidade")
                        .HasColumnType("bigint");

                    b.Property<string>("ReceitaReferenciaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Visivel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("ItemReferenciaId");

                    b.HasIndex("ReceitaReferenciaId");

                    b.ToTable("ReceitasItens");
                });

            modelBuilder.Entity("BDOLife.Core.Entities.ReceitaResultado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Excluido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("ProcRaro")
                        .HasColumnType("bit");

                    b.Property<string>("ReceitaReferenciaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResultadoReferenciaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Tier")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceitaReferenciaId");

                    b.HasIndex("ResultadoReferenciaId");

                    b.ToTable("ReceitasResultados");
                });

            modelBuilder.Entity("BDOLife.Core.Entities.TipoProcesso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Descricao")
                        .HasColumnType("int");

                    b.Property<bool>("Excluido")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("TiposProcessos");
                });

            modelBuilder.Entity("BDOLife.Core.Entities.TipoProcessoExperiencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MediaXpPorCraft")
                        .HasColumnType("int");

                    b.Property<decimal>("QtdMaterialAPorCraft")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("QtdMaterialBPorCraft")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("TiposProcessosExperiencia");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BDOLife.Core.Entities.AgrupamentoItem", b =>
                {
                    b.HasOne("BDOLife.Core.Entities.Agrupamento", "Agrupamento")
                        .WithMany("Itens")
                        .HasForeignKey("AgrupamentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BDOLife.Core.Entities.Item", "Item")
                        .WithMany("AgrupadoEm")
                        .HasForeignKey("ItemReferenciaId")
                        .HasPrincipalKey("ReferenciaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BDOLife.Core.Entities.HistoricoPreco", b =>
                {
                    b.HasOne("BDOLife.Core.Entities.Item", "Item")
                        .WithMany("HistoricoPrecos")
                        .HasForeignKey("ItemReferenciaId")
                        .HasPrincipalKey("ReferenciaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BDOLife.Core.Entities.ImperialReceita", b =>
                {
                    b.HasOne("BDOLife.Core.Entities.Imperial", "Imperial")
                        .WithMany("Receitas")
                        .HasForeignKey("ImperialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BDOLife.Core.Entities.Item", "Item")
                        .WithMany("ImperiaisReceitas")
                        .HasForeignKey("ItemReferenciaId")
                        .HasPrincipalKey("ReferenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BDOLife.Core.Entities.RankingCulinaria", b =>
                {
                    b.HasOne("BDOLife.Core.Entities.Item", "Receita")
                        .WithMany("RankingsCulinaria")
                        .HasForeignKey("ReceitaReferenciaId")
                        .HasPrincipalKey("ReferenciaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BDOLife.Core.Entities.ReceitaItem", b =>
                {
                    b.HasOne("BDOLife.Core.Entities.Item", "Item")
                        .WithMany("Receitas")
                        .HasForeignKey("ItemReferenciaId")
                        .HasPrincipalKey("ReferenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BDOLife.Core.Entities.Item", "Receita")
                        .WithMany("Itens")
                        .HasForeignKey("ReceitaReferenciaId")
                        .HasPrincipalKey("ReferenciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BDOLife.Core.Entities.ReceitaResultado", b =>
                {
                    b.HasOne("BDOLife.Core.Entities.Item", "Receita")
                        .WithMany("Resultados")
                        .HasForeignKey("ReceitaReferenciaId")
                        .HasPrincipalKey("ReferenciaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BDOLife.Core.Entities.Item", "Resultado")
                        .WithMany("ResultadosEm")
                        .HasForeignKey("ResultadoReferenciaId")
                        .HasPrincipalKey("ReferenciaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
